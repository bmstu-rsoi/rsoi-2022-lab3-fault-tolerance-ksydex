version: "3"
services:
  
  postgres:
    image: library/postgres:13
    container_name: postgres
    restart: on-failure
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./postgres/:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
        
  rabbitmq:
    image: rabbitmq:3-management
    container_name: 'rabbitmq'
    tty: true
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 1s
      timeout: 3s
      retries: 30
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
#    networks:
#      - rabbitmq_go_net
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq

  pgadmin:
    image: dpage/pgadmin4
    #    environment:
    #     - PGADMIN_DEFAULT_EMAIL=
    #      - PGADMIN_DEFAULT_PASSWORD=
    env_file:
      - .env
    ports:
      - ${PGADMIN_OUT_PORT}:80
    restart: always
    volumes:
      - pgadmin:/root/.pgadmin

  reservation-service:
    container_name: "reservation_service"
    depends_on:
      - "postgres"
    build:
      context: .
      dockerfile: ./src/ReservationService/Dockerfile
    restart: always
    ports:
      - ${RESERVATION_SERVICE_OUT_PORT}:80
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
        
  loyalty-service:
    container_name: "loyalty_service"
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./src/LoyaltyService/Dockerfile
    restart: on-failure
    ports:
      - ${LOYALTY_SERVICE_OUT_PORT}:80
    env_file:
      - .env

  payment-service:
    container_name: "payment_service"
    depends_on:
      - "postgres"
    build:
      context: .
      dockerfile: ./src/PaymentService/Dockerfile
    restart: always
    ports:
      - ${PAYMENT_SERVICE_OUT_PORT}:80
    env_file:
      - .env

  gateway:
    depends_on:
      - "reservation-service"
      - "rabbitmq"
    build:
      context: .
      dockerfile: ./src/Gateway/Dockerfile
    restart: always
    ports:
      - ${GATEWAY_OUT_PORT}:80
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development


volumes:
  db-data:
  pgadmin:

#networks:
#  rabbitmq_go_net:
#    driver: bridge